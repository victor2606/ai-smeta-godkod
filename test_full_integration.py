#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- FTS5 –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
- –í–µ–∫—Ç–æ—Ä–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
- –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (FTS5 + –≤–µ–∫—Ç–æ—Ä—ã)
- –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Ä–∞—Å—Ü–µ–Ω–∫–∏
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import sys
import os
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from src.database.db_manager import DatabaseManager
from src.search.search_engine import SearchEngine

# OpenAI API key from environment
API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    print("‚ùå ERROR: OPENAI_API_KEY environment variable not set")
    print("   Set it with: export OPENAI_API_KEY='your-api-key'")
    sys.exit(1)

print("=" * 80)
print("–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê –†–ê–°–¶–ï–ù–û–ö")
print("=" * 80)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db_manager = DatabaseManager("data/processed/estimates.db")
db_manager.connect()

# SearchEngine —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
search_engine = SearchEngine(db_manager, openai_api_key=API_KEY)

print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
print(f"   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: data/processed/estimates.db")
print(f"   - FTS5: –≤–∫–ª—é—á–µ–Ω")
print(f"   - Vector Search: {'–≤–∫–ª—é—á–µ–Ω' if search_engine.vector_engine else '–≤—ã–∫–ª—é—á–µ–Ω'}")

# ============================================================================
# –¢–ï–°–¢ 1: FTS5 –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
# ============================================================================
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 1: FTS5 –ü–û–õ–ù–û–¢–ï–ö–°–¢–û–í–´–ô –ü–û–ò–°–ö")
print("=" * 80)

query1 = "–±–µ—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–æ–ª–∏—Ç–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
print(f"\n–ó–∞–ø—Ä–æ—Å: '{query1}'")

fts_results = search_engine.search(query1, limit=5)
print(f"\n–ù–∞–π–¥–µ–Ω–æ: {len(fts_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

for i, r in enumerate(fts_results, 1):
    print(f"\n{i}. {r['rate_code']}")
    print(f"   {r['rate_full_name'][:80]}...")
    print(f"   –¶–µ–Ω–∞: {r['cost_per_unit']:.2f} —Ä—É–±/{r['unit_measure_full']}")
    print(f"   FTS Rank: {r['rank']:.4f}")

# ============================================================================
# –¢–ï–°–¢ 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
# ============================================================================
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 2: –í–ï–ö–¢–û–†–ù–´–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö")
print("=" * 80)

query2 = "–∫–æ–ø–∫–∞ —Ç—Ä–∞–Ω—à–µ–∏ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–æ–º"
print(f"\n–ó–∞–ø—Ä–æ—Å: '{query2}'")

vector_results = search_engine.vector_search(query2, limit=5)
print(f"\n–ù–∞–π–¥–µ–Ω–æ: {len(vector_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

for i, r in enumerate(vector_results, 1):
    print(f"\n{i}. {r['rate_code']}")
    print(f"   {r['rate_full_name'][:80]}...")
    print(f"   –¶–µ–Ω–∞: {r['cost_per_unit']:.2f} —Ä—É–±/{r['unit_type']}")
    print(f"   Similarity: {r['similarity']:.3f}")

# ============================================================================
# –¢–ï–°–¢ 3: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (FTS5 + Vector)
# ============================================================================
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 3: –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–ò–°–ö (FTS5 + VECTOR)")
print("=" * 80)

query3 = "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞—Å—Ñ–∞–ª—å—Ç–æ–±–µ—Ç–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"
print(f"\n–ó–∞–ø—Ä–æ—Å: '{query3}'")

hybrid_results = search_engine.hybrid_search(
    query3, fts_limit=10, vector_limit=5, similarity_threshold=0.4
)

print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
print(f"   - FTS5: {len(hybrid_results['fts_results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
print(f"   - Vector: {len(hybrid_results['vector_results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
print(f"   - Combined: {len(hybrid_results['combined'])} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

print(f"\n–¢–æ–ø-5 –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
for i, r in enumerate(hybrid_results["combined"][:5], 1):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—É–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    source = "Vector + FTS" if "similarity" in r else "FTS only"

    print(f"\n{i}. {r['rate_code']} [{source}]")
    print(f"   {r.get('rate_full_name', r.get('rate_full_name', 'N/A'))[:80]}...")

    if "similarity" in r:
        print(f"   Similarity: {r['similarity']:.3f}")
    if "rank" in r:
        print(f"   FTS Rank: {r['rank']:.4f}")

# ============================================================================
# –¢–ï–°–¢ 4: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
# ============================================================================
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 4: –í–ï–ö–¢–û–†–ù–´–ô –ü–û–ò–°–ö –° –§–ò–õ–¨–¢–†–ê–ú–ò")
print("=" * 80)

query4 = "—É–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏"
print(f"\n–ó–∞–ø—Ä–æ—Å: '{query4}'")
print(f"–§–∏–ª—å—Ç—Ä: min_cost >= 5000 —Ä—É–±")

filtered_results = search_engine.vector_search(
    query4, filters={"min_cost": 5000}, limit=5
)

print(f"\n–ù–∞–π–¥–µ–Ω–æ: {len(filtered_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

for i, r in enumerate(filtered_results, 1):
    print(f"\n{i}. {r['rate_code']}")
    print(f"   {r['rate_full_name'][:80]}...")
    print(f"   –¶–µ–Ω–∞: {r['cost_per_unit']:.2f} —Ä—É–±/{r['unit_type']}")
    print(f"   Similarity: {r['similarity']:.3f}")

# ============================================================================
# –¢–ï–°–¢ 5: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É
# ============================================================================
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 5: –ü–û–ò–°–ö –ü–û –ö–û–î–£ –†–ê–°–¶–ï–ù–ö–ò")
print("=" * 80)

code_prefix = "01-01"
print(f"\n–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–¥–∞: '{code_prefix}'")

code_results = search_engine.search_by_code(code_prefix)
print(f"\n–ù–∞–π–¥–µ–Ω–æ: {len(code_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

for i, r in enumerate(code_results[:5], 1):
    print(f"\n{i}. {r['rate_code']}")
    if r["rate_full_name"]:
        print(f"   {r['rate_full_name'][:80]}...")
    print(f"   –¶–µ–Ω–∞: {r['cost_per_unit']:.2f} —Ä—É–±/{r['unit_measure_full']}")

# ============================================================================
# –¢–ï–°–¢ 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ FTS5 vs Vector –Ω–∞ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
# ============================================================================
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 6: –°–†–ê–í–ù–ï–ù–ò–ï FTS5 vs VECTOR –ù–ê –û–î–ù–û–ú –ó–ê–ü–†–û–°–ï")
print("=" * 80)

query6 = "–º–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
print(f"\n–ó–∞–ø—Ä–æ—Å: '{query6}'")

# FTS5
fts_comp = search_engine.search(query6, limit=3)
print(f"\nüìù FTS5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(fts_comp)}):")
for i, r in enumerate(fts_comp, 1):
    print(f"{i}. {r['rate_code']}: {r['rate_full_name'][:60]}...")

# Vector
vec_comp = search_engine.vector_search(query6, limit=3)
print(f"\nüîç Vector —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(vec_comp)}):")
for i, r in enumerate(vec_comp, 1):
    print(f"{i}. {r['rate_code']}: {r['rate_full_name'][:60]}...")
    print(f"   Similarity: {r['similarity']:.3f}")

# ============================================================================
# –ò–¢–û–ì–ò
# ============================================================================
print("\n" + "=" * 80)
print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
print("=" * 80)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã
stats_sql = """
SELECT
    (SELECT COUNT(*) FROM rates) as total_rates,
    (SELECT COUNT(*) FROM resources) as total_resources,
    (SELECT COUNT(*) FROM rates WHERE embedding IS NOT NULL) as rates_with_embeddings,
    (SELECT COUNT(*) FROM rates WHERE rate_full_name IS NOT NULL AND rate_full_name != '') as rates_with_names
"""

stats = db_manager.execute_query(stats_sql)[0]

print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
print(f"   - –í—Å–µ–≥–æ —Ä–∞—Å—Ü–µ–Ω–æ–∫: {stats[0]:,}")
print(f"   - –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {stats[1]:,}")
print(f"   - –†–∞—Å—Ü–µ–Ω–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏: {stats[3]:,}")
print(f"   - –†–∞—Å—Ü–µ–Ω–æ–∫ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {stats[2]:,} ({stats[2] / stats[0] * 100:.1f}%)")

print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
print(f"\nüí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
print(f"   - FTS5 –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
print(f"   - –í–µ–∫—Ç–æ—Ä–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
print(f"   - –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (–ª—É—á—à–µ–µ –∏–∑ –æ–±–æ–∏—Ö)")
print(f"   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –µ–¥–∏–Ω–∏—Ü–∞–º")
print(f"   - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º —Ä–∞—Å—Ü–µ–Ω–æ–∫")

db_manager.disconnect()
print("\n" + "=" * 80)
